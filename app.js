// Generated by CoffeeScript 1.4.0
(function() {
  var App, Blob, Blobs,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Blob = (function() {

    function Blob(app) {
      this.app = app;
      this.animate = __bind(this.animate, this);

      this.x = this.app.roundom(this.app.width);
      this.y = this.app.roundom(this.app.height);
      this.xAcceleration = Math.random() + 0.1;
      this.yAcceleration = Math.random() - 0.5;
    }

    Blob.prototype.animate = function() {
      var point, _i, _len, _ref, _results;
      this.motion();
      this.edgeDetection();
      _ref = this.app.points;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        _results.push(this.line(point));
      }
      return _results;
    };

    Blob.prototype.line = function(point) {
      if (this.app.dist(this, point) < 50) {
        this.app.ctx.beginPath();
        this.app.ctx.moveTo(this.x, this.y);
        this.app.ctx.lineTo(point.x, point.y);
        this.app.ctx.closePath();
        return this.app.ctx.stroke();
      }
    };

    Blob.prototype.motion = function() {
      this.x += this.xAcceleration;
      return this.y += this.yAcceleration;
    };

    Blob.prototype.edgeDetection = function() {
      if (this.x > this.app.width + 5) {
        this.x = -5;
      }
      if (this.x < -5) {
        this.x = this.app.width + 5;
      }
      if (this.y > this.app.height + 5) {
        this.y = -5;
      }
      if (this.y < -5) {
        return this.y = this.app.height + 5;
      }
    };

    return Blob;

  })();

  Blobs = (function() {

    function Blobs(app) {
      var i, _i;
      this.app = app;
      this.animate = __bind(this.animate, this);

      this.collection = [];
      for (i = _i = 1; _i <= 26; i = ++_i) {
        this["new"]();
      }
    }

    Blobs.prototype.animate = function() {
      var obj, _i, _len, _ref, _results;
      _ref = this.collection;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        _results.push(obj.animate());
      }
      return _results;
    };

    Blobs.prototype["new"] = function() {
      return this.collection.push(new Blob(this.app));
    };

    return Blobs;

  })();

  App = (function() {

    function App() {
      this.resize = __bind(this.resize, this);

      this.animate = __bind(this.animate, this);
      this.canvas = $('canvas');
      this.ctx = this.canvas[0].getContext('2d');
      this.height = this.canvas.height();
      this.canvas[0].height = this.height;
      $(window).resize(this.resize);
      this.calculateWidth();
      this.blobs = new Blobs(this);
    }

    App.prototype.animate = function() {
      this.clear();
      this.blobs.animate();
      return requestAnimationFrame(this.animate);
    };

    App.prototype.clear = function() {
      this.ctx.fillStyle = 'rgba(255,255,255,0.2)';
      this.ctx.strokeStyle = '#d5d5d5';
      return this.ctx.fillRect(0, 0, this.width, this.height);
    };

    App.prototype.resize = function() {
      return this.calculateWidth();
    };

    App.prototype.calculateWidth = function() {
      this.width = this.canvas.width() - 1;
      this.canvas[0].width = this.width;
      return this.points = this.calculatePoints();
    };

    App.prototype.calculatePoints = function() {
      var points, x, y, _i, _j, _ref, _ref1;
      points = [];
      for (x = _i = 0, _ref = this.width / 50; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.height / 50; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          points.push({
            x: x * 50,
            y: y * 50
          });
        }
      }
      return points;
    };

    App.prototype.dist = function(object1, object2) {
      var a, b, _ref;
      _ref = [object1.x - object2.x, object1.y - object2.y], a = _ref[0], b = _ref[1];
      return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
    };

    App.prototype.roundom = function(int) {
      return Math.round(Math.random() * int);
    };

    return App;

  })();

  $(function() {
    window.app = new App;
    return window.app.animate();
  });

}).call(this);
